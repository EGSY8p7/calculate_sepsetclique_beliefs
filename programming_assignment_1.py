# -*- coding: utf-8 -*-
"""Programming assignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16R8Lh94EzXJuNimbC2knZe8XmgXF827K

**Programming Assignment 1**

Student name: Madina Kudaibergenova

Implement a message passing asynchronous algorithm for graph calibration from the following inputs:

1 - a set of factors specifying either the probabilities or random co-occurrences for each factor;

2 - a cluster graph (input file with one line indicating cluster of variables separated by comma).

Output the set of calibrated clique and sepset beliefs
"""

# importing necessary libraries
import numpy as np # to work with arrays
import pandas as pd # to work with tables

# initialize variables, factors and their values
factors = [[0, 1], [0,2], [2,3], [2,4], [2,6], [3,4], [3,5],[5,6]]
values = [np.array([404, 331, 454, 432]), np.array([211, 215, 339, 151]), 
          np.array([394, 206, 122, 468]), np.array([45, 401, 42, 101]),
          np.array([82, 187, 396, 48]), np.array([393, 168, 323, 270]),
          np.array([496, 262, 307, 191]), np.array([47, 200, 160, 199])]

"""---

**First we find clique potentials for each cliques, and then find messages sent forward**

We should get 6 messages due to the formula 2*(number of cliques - 1) = 2*(4-1) = 6

1) Eliminating 0 and 1, and send {2} from [012] to [234] cliques
"""

true_false01 = [["0 false","1 false"],["0 false","1 true"],["0 true","1 false"],["0 true","1 true"]]
init_df01 = pd.DataFrame({ '0 and 1' : true_false01, 'values' : values[0] })
init_df01

true_false02 = [["0 false","2 false"],["0 false","2 true"],["0 true","2 false"],["0 true","2 true"]]
init_df02 = pd.DataFrame({ '0 and 2' : true_false02, 'values' : values[1]  })
init_df02

# compute clique potential
true_false012 = [["0 false", "1 false", "2 false"], ["0 false", "1 false", "2 true"], ["0 false", "1 true", "2 false"],
               ["0 false", "1 true", "2 true"], ["0 true", "1 false", "2 false"], ["0 true", "1 false", "2 true"], 
               ["0 true", "1 true", "2 false"], ["0 true", "1 true", "2 true"] ]
clique_potential012 = [ values[0][0]*values[1][0], values[0][0]*values[1][1], values[0][1]*values[1][0],
                        values[0][1]*values[1][1], values[0][2]*values[1][2], values[0][2]*values[1][3],
                        values[0][3]*values[1][2], values[0][3]*values[1][3] ]
CP_df012 = pd.DataFrame({ '0 and 1 and 2' : true_false012, 'values' : clique_potential012  })
CP_df012

# compute message {2}
# sum based on 2 only because we send only {2}
# 2 false, 2 true
message012 = [ clique_potential012[0]+clique_potential012[2]+clique_potential012[4]+clique_potential012[6], 
              clique_potential012[1]+clique_potential012[3]+clique_potential012[5]+clique_potential012[7]]
true_false2 = [["2 false"], ["2 true"]]
M_df2_1 = pd.DataFrame({ '2' : true_false2, 'values' : message012  })
M_df2_1

"""2) Eliminating 4, and send {23} message to [2,3,6] clique"""

true_false24 = [["2 false","4 false"],["2 false","4 true"],["2 true","4 false"],["2 true","4 true"]]
init_df24 = pd.DataFrame({ '2 and 4' : true_false24, 'values' : values[3]  })
init_df24

true_false34 = [["3 false","4 false"],["3 false","4 true"],["3 true","4 false"],["3 true","4 true"]]
init_df34 = pd.DataFrame({ '3 and 4' : true_false34, 'values' : values[5]  })
init_df34

# compute clique potentials
true_false234 = [["2 false", "3 false", "4 false"], ["2 false", "3 false", "4 true"], ["2 false", "3 true", "4 false"],
               ["2 false", "3 true", "4 true"], ["2 true", "3 false", "4 false"], ["2 true", "3 false", "4 true"], 
               ["2 true", "3 true", "4 false"], ["2 true", "3 true", "4 true"] ]
clique_potential234 = [ values[3][0]*values[5][0], values[3][0]*values[5][1], values[3][0]*values[5][2],
                        values[3][1]*values[5][3], values[3][2]*values[5][0], values[3][3]*values[5][0],
                        values[3][2]*values[5][2], values[3][3]*values[5][3] ]
CP_df234 = pd.DataFrame({ '2 and 3 and 4' : true_false234, 'values' : clique_potential234  })
CP_df234

# compute messages
# sum based on 2 and 3 
# 2 false 3 false, 2 false 3 true, 2 true 3 false, 2 true 3 true
message234 = [ clique_potential234[0]+clique_potential234[1], clique_potential234[2]+clique_potential234[3], 
              clique_potential234[4]+clique_potential234[5], clique_potential234[6]+clique_potential234[7]]
true_false23 = [["2 false", "3 false"], ["2 false", "3 true"], ["2 true", "3 false"], ["2 true", "3 true"] ]
M_df23_1 = pd.DataFrame({ '2 and 3' : true_false23, 'values' : message234  })
M_df23_1

"""3) Eliminating 2, and send {36} message to [3,5,6]"""

true_false23 = [["2 false","3 false"],["2 false","3 true"],["2 true","3 false"],["2 true","3 true"]]
init_df23 = pd.DataFrame({ '2 and 3' : true_false23, 'values' : values[2]  })
init_df23

true_false26 = [["2 false","6 false"],["2 false","6 true"],["2 true","6 false"],["2 true","6 true"]]
init_df26 = pd.DataFrame({ '2 and 6' : true_false26, 'values' : values[4]  })
init_df26

# compute clique potential
true_false236 = [["2 false", "3 false", "6 false"], ["2 false", "3 false", "6 true"], ["2 false", "3 true", "6 false"],
               ["2 false", "3 true", "6 true"], ["2 true", "3 false", "6 false"], ["2 true", "3 false", "6 true"], 
               ["2 true", "3 true", "6 false"], ["2 true", "3 true", "6 true"] ]
clique_potential236 = [ values[2][0]*values[4][0], values[2][0]*values[4][1], values[2][1]*values[4][0],
           values[2][1]*values[4][1], values[2][2]*values[4][2], values[2][2]*values[4][3],
           values[2][3]*values[4][2], values[2][3]*values[4][3] ]
CP_df236 = pd.DataFrame({ '2 and 3 and 6' : true_false236, 'values' : clique_potential236  })
CP_df236

# compute message {36}
# sum based on 3 and 6 
# 3 false 6 false, 3 false 6 true, 3 true 6 false, 3 true 6 true
message236 = [ clique_potential236[0]+clique_potential236[4], clique_potential236[2]+clique_potential236[5], 
              clique_potential236[2]+clique_potential236[6], clique_potential236[3]+clique_potential236[7]]
true_false36 = [["3 false", "6 false"], ["3 false", "6 true"], ["3 true", "6 false"], ["3 true", "6 true"] ]
M_df36_1 = pd.DataFrame({ '3 and 6' : true_false36, 'values' : message236  })
M_df36_1

"""---

**Calculate messages sent back through cliques**

1) Sending message back, eliminating 5, send {3,6} from [3,5,6] to [2,3,6]
"""

true_false35 = [["3 false","5 false"],["3 false","5 true"],["3 true","5 false"],["3 true","5 true"]]
init_df35 = pd.DataFrame({ '3 and 5' : true_false35, 'values' : values[6]  })
init_df35

true_false56 = [["5 false","6 false"],["5 false","6 true"],["5 true","6 false"],["5 true","6 true"]]
init_df56 = pd.DataFrame({ '5 and 6' : true_false56, 'values' : values[7]  })
init_df56

# compute clique potential
true_false356 = [["3 false", "5 false", "6 false"], ["3 false", "5 false", "6 true"], ["3 false", "5 true", "6 false"],
               ["3 false", "5 true", "6 true"], ["3 true", "5 false", "6 false"], ["3 true", "5 false", "6 true"], 
               ["3 true", "5 true", "6 false"], ["3 true", "5 true", "6 true"] ]
clique_potential356 = [ values[6][0]*values[7][0], values[6][0]*values[7][1], values[6][1]*values[7][0],
           values[6][1]*values[7][1], values[6][2]*values[7][2], values[6][2]*values[7][3],
           values[6][3]*values[7][2], values[6][3]*values[7][3] ]
CP_df356 = pd.DataFrame({ '3 and 5 and 6' : true_false356, 'values' : clique_potential356  })
CP_df356

# compute messages
# sum based on 3 and 6 
# 3 false 6 false, 3 false 6 true, 3 true 6 false, 3 true 6 true
message356_back = [ clique_potential356[0]+clique_potential356[2], clique_potential356[1]+clique_potential356[3], 
              clique_potential356[4]+clique_potential356[6], clique_potential356[5]+clique_potential356[7]]
true_false36 = [["3 false", "6 false"], ["3 false", "6 true"], ["3 true", "6 false"], ["3 true", "6 true"] ]
M_df36_2 = pd.DataFrame({ '3 and 6' : true_false36, 'values' : message356_back  })
M_df36_2

"""2) Eliminating 6, send {23} message from [236] to [234]"""

# based on 2 and 3 compose the message by summation
# 2 false 3 false, 2 false 3 true, 2 true 3 false, 2 true 3 true
# from [236] to [234]
message236_back = [ clique_potential236[0]+clique_potential236[1], clique_potential236[2]+clique_potential236[3], 
                   clique_potential236[4]+clique_potential236[5], clique_potential236[6]+clique_potential236[7]]
M_df23_2 = pd.DataFrame({ '2 and 3' : true_false23, 'values' : message236_back  })
M_df23_2

# send message back from [234] to [012]
# compute M_df2_2 (message234_back) by eliminating 3 and 4, and send {2} to [012]
# based on 2 we form a message M_df2_2 from clique_potential234
message234_back = [ clique_potential234[0]+clique_potential234[1]+clique_potential234[2]+clique_potential234[3], 
                   clique_potential234[4]+clique_potential234[5]+clique_potential234[6]+clique_potential234[7]]
M_df2_2 = pd.DataFrame({ '2' : true_false2, 'values' : message234_back  })
M_df2_2

"""---

**Calculating clique and sepset beliefs**

1) To calculate sepset belief between [236]-[356] cliques we multiply the messages {36}
"""

# message236(M_df36_1) * message356_back (M_df36_2)
sepset36 = [message236[0]*message356_back[0], message236[1]*message356_back[1], 
            message236[2]*message356_back[2], message236[3]*message356_back[3]]
S_df36 = pd.DataFrame({'3 and 6': true_false36, 'values': sepset36})
S_df36

"""Now we need to multiply messages with corresponding clique potentials and get clique beliefs."""

# from [356] to [236], multiply clique_potential236 with the last M_df36_2 (message 356)
clique_belief236_2 = [clique_potential236[0]*message356[0], clique_potential236[1]*message356[1], 
                      clique_potential236[2]*message356[2], clique_potential236[3]*message356[3], 
                      clique_potential236[4]*message356[0], clique_potential236[5]*message356[1],
                      clique_potential236[6]*message356[2], clique_potential236[7]*message356[3]]
CB_df236_2 = pd.DataFrame({ '2 and 3 and 6' : true_false236, 'values' : clique_belief236_2 })
CB_df236_2

# multiply corresponding values from clique_potential356 and M_df36_1 (message 236)
# from [236]-[356]
clique_belief356 = [clique_potential356[0]*message236[0], clique_potential356[1]*message236[1], 
                    clique_potential356[2]*message236[0], clique_potential356[3]*message236[1], 
                    clique_potential356[4]*message236[2], clique_potential356[5]*message236[3],
                    clique_potential356[6]*message236[2], clique_potential356[7]*message236[3]]
CB_df356 = pd.DataFrame({ '3 and 5 and 6' : true_false356, 'values' : clique_belief356 })
CB_df356

"""2) Sepset belief between [234]-[236]"""

# sepset belief of [234]-[236] is {23} and it is a multiple of 2 messages between them
sepset23 = [message234[0]*message236_back[0], message234[1]*message236_back[1], 
            message234[2]*message236_back[2], message234[3]*message236_back[3]]
S_df23 = pd.DataFrame({'2 and 3': true_false23, 'values': sepset23})
S_df23

# now we compute clique beliefs of [234] and [236]
# multiply message M_df23_2 (message236_back) with clique_potential234

clique_belief234_2 = [clique_potential234[0]*message236_back[0], clique_potential234[1]*message236_back[0], 
                    clique_potential234[2]*message236_back[1], clique_potential234[3]*message236_back[1], 
                    clique_potential234[4]*message236_back[2], clique_potential234[5]*message236_back[2],
                    clique_potential234[6]*message236_back[3], clique_potential234[7]*message236_back[3]]
CB_df234_2 = pd.DataFrame({ '2 and 3 and 4' : true_false234, 'values' : clique_belief234_2 })
CB_df234_2

# clique belief for [236] by multiplying message234 (M_df23_1) with clique_potential236
clique_belief236_1 = [clique_potential236[0]*message356[0], clique_potential236[1]*message356[0], 
                      clique_potential236[2]*message356[1], clique_potential236[3]*message356[1], 
                      clique_potential236[4]*message356[2], clique_potential236[5]*message356[2],
                      clique_potential236[6]*message356[3], clique_potential236[7]*message356[3]]
CB_df236_1 = pd.DataFrame({ '2 and 3 and 6' : true_false236, 'values' : clique_belief236_1 })
CB_df236_1

"""3) Now we find clique and sepset belief between [012]-[234]"""

# sepset for [012]-[234] is a multiple of message234_back(M_df2_2) and message012 (M_df2_1)
sepset2 = [message012[0]*message234_back[0],message012[1]*message234_back[1]]
S_df2 = pd.DataFrame({'2': true_false2, 'values': sepset2})
S_df2

# we calculate clique belief of [012] by multiplying clique_potential012 with message234_back (M_df2_2)
clique_belief012 = [clique_potential012[0]*message234_back[0], clique_potential012[1]*message234_back[1], 
                    clique_potential012[2]*message234_back[0], clique_potential012[3]*message234_back[1], 
                    clique_potential012[4]*message234_back[0], clique_potential012[5]*message234_back[1],
                    clique_potential012[6]*message234_back[0], clique_potential012[7]*message234_back[1]]
CB_df012 = pd.DataFrame({ '0 and 1 and 2' : true_false012, 'values' : clique_belief012 })
CB_df012

# and now we find clique belief of [234] by multiplying clique_potential234 with message012 (M_df2_1)
clique_belief234_1 = [clique_potential234[0]*message012[0], clique_potential234[1]*message012[0], 
                      clique_potential234[2]*message012[0], clique_potential234[3]*message012[0], 
                      clique_potential234[4]*message012[1], clique_potential234[5]*message012[1],
                      clique_potential234[6]*message012[1], clique_potential234[7]*message012[1]]
CB_df234_1 = pd.DataFrame({ '2 and 3 and 4' : true_false234, 'values' : clique_belief234_1 })
CB_df234_1

"""---

**Notes****

Sepsets between:

1) [012]-[234] is S_df2

2) [234]-[236] is S_df23

3) [236]-[356] is S_df36
"""